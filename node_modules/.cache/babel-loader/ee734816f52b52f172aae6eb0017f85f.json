{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kaustubh\\\\Projects\\\\Personal\\\\kaustubh-website\\\\src\\\\components\\\\Contact\\\\EmailLink.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\"; // Validates the first half of an email address.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst validateText = text => {\n  // NOTE: Passes RFC 5322 but not tested on google's standard.\n  // eslint-disable-next-line no-useless-escape\n  const re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))$/;\n  return re.test(text) || text.length === 0;\n};\n\nconst messages = [\"kaustubh1955\"];\n\nconst useInterval = (callback, delay) => {\n  _s();\n\n  const savedCallback = useRef();\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n  useEffect(() => {\n    if (delay) {\n      const id = setInterval(() => {\n        savedCallback.current();\n      }, delay);\n      return () => clearInterval(id);\n    }\n\n    return () => {}; // pass linter\n  }, [delay]);\n};\n\n_s(useInterval, \"dqNZMqbncP+HtqBlD20aSNv0Ugk=\");\n\nconst EmailLink = () => {\n  _s2();\n\n  const hold = 50; // ticks to wait after message is complete before rendering next message\n\n  const delay = 50; // tick length in mS\n\n  const [idx, updateIter] = useState(0); // points to current message\n\n  const [message, updateMessage] = useState(messages[idx]);\n  const [char, updateChar] = useState(messages[idx].length); // points to current char\n\n  const [isActive, setIsActive] = useState(true); // disable when all messages are printed\n\n  useInterval(() => {\n    let newIdx = idx;\n    let newChar = char;\n\n    if (char - hold >= messages[idx].length) {\n      newIdx += 1;\n      newChar = 0;\n    }\n\n    if (newIdx === messages.length) {\n      setIsActive(false);\n    } else {\n      updateMessage(messages[newIdx].slice(0, newChar));\n      updateIter(newIdx);\n      updateChar(newChar + 1);\n    }\n  }, isActive ? delay : null);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"inline-container\",\n    style: validateText(message) ? {} : {\n      color: \"red\"\n    },\n    onMouseEnter: () => setIsActive(false),\n    onMouseLeave: () => idx < messages.length && setIsActive(true),\n    children: /*#__PURE__*/_jsxDEV(\"a\", {\n      href: validateText(message) ? `mailto:${message}@gmail.com` : \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"@gmail.com\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(EmailLink, \"iH1BN7mQZ88gQeN5H2uidhqSB6s=\", false, function () {\n  return [useInterval];\n});\n\n_c = EmailLink;\nexport default EmailLink;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmailLink\");","map":{"version":3,"sources":["C:/Users/Kaustubh/Projects/Personal/kaustubh-website/src/components/Contact/EmailLink.js"],"names":["React","useEffect","useRef","useState","validateText","text","re","test","length","messages","useInterval","callback","delay","savedCallback","current","id","setInterval","clearInterval","EmailLink","hold","idx","updateIter","message","updateMessage","char","updateChar","isActive","setIsActive","newIdx","newChar","slice","color"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\n\r\n// Validates the first half of an email address.\r\nconst validateText = (text) => {\r\n  // NOTE: Passes RFC 5322 but not tested on google's standard.\r\n  // eslint-disable-next-line no-useless-escape\r\n  const re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))$/;\r\n  return re.test(text) || text.length === 0;\r\n};\r\n\r\nconst messages = [\"kaustubh1955\"];\r\n\r\nconst useInterval = (callback, delay) => {\r\n  const savedCallback = useRef();\r\n\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  useEffect(() => {\r\n    if (delay) {\r\n      const id = setInterval(() => {\r\n        savedCallback.current();\r\n      }, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n    return () => {}; // pass linter\r\n  }, [delay]);\r\n};\r\n\r\nconst EmailLink = () => {\r\n  const hold = 50; // ticks to wait after message is complete before rendering next message\r\n  const delay = 50; // tick length in mS\r\n\r\n  const [idx, updateIter] = useState(0); // points to current message\r\n  const [message, updateMessage] = useState(messages[idx]);\r\n  const [char, updateChar] = useState(messages[idx].length); // points to current char\r\n  const [isActive, setIsActive] = useState(true); // disable when all messages are printed\r\n\r\n  useInterval(\r\n    () => {\r\n      let newIdx = idx;\r\n      let newChar = char;\r\n      if (char - hold >= messages[idx].length) {\r\n        newIdx += 1;\r\n        newChar = 0;\r\n      }\r\n      if (newIdx === messages.length) {\r\n        setIsActive(false);\r\n      } else {\r\n        updateMessage(messages[newIdx].slice(0, newChar));\r\n        updateIter(newIdx);\r\n        updateChar(newChar + 1);\r\n      }\r\n    },\r\n    isActive ? delay : null\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className=\"inline-container\"\r\n      style={validateText(message) ? {} : { color: \"red\" }}\r\n      onMouseEnter={() => setIsActive(false)}\r\n      onMouseLeave={() => idx < messages.length && setIsActive(true)}\r\n    >\r\n      <a href={validateText(message) ? `mailto:${message}@gmail.com` : \"\"}>\r\n        <span>{message}</span>\r\n        <span>@gmail.com</span>\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmailLink;\r\n"]},"metadata":{},"sourceType":"module"}